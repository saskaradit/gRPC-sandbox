// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: divide/dividepb/divide.proto

package dividepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Divide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *Divide) Reset() {
	*x = Divide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divide_dividepb_divide_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Divide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Divide) ProtoMessage() {}

func (x *Divide) ProtoReflect() protoreflect.Message {
	mi := &file_divide_dividepb_divide_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Divide.ProtoReflect.Descriptor instead.
func (*Divide) Descriptor() ([]byte, []int) {
	return file_divide_dividepb_divide_proto_rawDescGZIP(), []int{0}
}

func (x *Divide) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type DivideManyTimesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Divide *Divide `protobuf:"bytes,1,opt,name=divide,proto3" json:"divide,omitempty"`
}

func (x *DivideManyTimesRequest) Reset() {
	*x = DivideManyTimesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divide_dividepb_divide_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideManyTimesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideManyTimesRequest) ProtoMessage() {}

func (x *DivideManyTimesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_divide_dividepb_divide_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideManyTimesRequest.ProtoReflect.Descriptor instead.
func (*DivideManyTimesRequest) Descriptor() ([]byte, []int) {
	return file_divide_dividepb_divide_proto_rawDescGZIP(), []int{1}
}

func (x *DivideManyTimesRequest) GetDivide() *Divide {
	if x != nil {
		return x.Divide
	}
	return nil
}

type DivideManyTimesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DivideManyTimesResponse) Reset() {
	*x = DivideManyTimesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_divide_dividepb_divide_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivideManyTimesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivideManyTimesResponse) ProtoMessage() {}

func (x *DivideManyTimesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_divide_dividepb_divide_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivideManyTimesResponse.ProtoReflect.Descriptor instead.
func (*DivideManyTimesResponse) Descriptor() ([]byte, []int) {
	return file_divide_dividepb_divide_proto_rawDescGZIP(), []int{2}
}

func (x *DivideManyTimesResponse) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

var File_divide_dividepb_divide_proto protoreflect.FileDescriptor

var file_divide_dividepb_divide_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x70,
	0x62, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x16, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x52, 0x06, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x67, 0x0a,
	0x0d, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x0f, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x4d, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x13, 0x5a, 0x11, 0x2e, 0x2f, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x2f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_divide_dividepb_divide_proto_rawDescOnce sync.Once
	file_divide_dividepb_divide_proto_rawDescData = file_divide_dividepb_divide_proto_rawDesc
)

func file_divide_dividepb_divide_proto_rawDescGZIP() []byte {
	file_divide_dividepb_divide_proto_rawDescOnce.Do(func() {
		file_divide_dividepb_divide_proto_rawDescData = protoimpl.X.CompressGZIP(file_divide_dividepb_divide_proto_rawDescData)
	})
	return file_divide_dividepb_divide_proto_rawDescData
}

var file_divide_dividepb_divide_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_divide_dividepb_divide_proto_goTypes = []interface{}{
	(*Divide)(nil),                  // 0: divide.Divide
	(*DivideManyTimesRequest)(nil),  // 1: divide.DivideManyTimesRequest
	(*DivideManyTimesResponse)(nil), // 2: divide.DivideManyTimesResponse
}
var file_divide_dividepb_divide_proto_depIdxs = []int32{
	0, // 0: divide.DivideManyTimesRequest.divide:type_name -> divide.Divide
	1, // 1: divide.DivideService.DivideManyTimes:input_type -> divide.DivideManyTimesRequest
	2, // 2: divide.DivideService.DivideManyTimes:output_type -> divide.DivideManyTimesResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_divide_dividepb_divide_proto_init() }
func file_divide_dividepb_divide_proto_init() {
	if File_divide_dividepb_divide_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_divide_dividepb_divide_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Divide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_divide_dividepb_divide_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideManyTimesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_divide_dividepb_divide_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivideManyTimesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_divide_dividepb_divide_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_divide_dividepb_divide_proto_goTypes,
		DependencyIndexes: file_divide_dividepb_divide_proto_depIdxs,
		MessageInfos:      file_divide_dividepb_divide_proto_msgTypes,
	}.Build()
	File_divide_dividepb_divide_proto = out.File
	file_divide_dividepb_divide_proto_rawDesc = nil
	file_divide_dividepb_divide_proto_goTypes = nil
	file_divide_dividepb_divide_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DivideServiceClient is the client API for DivideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DivideServiceClient interface {
	// Server Streaming
	DivideManyTimes(ctx context.Context, in *DivideManyTimesRequest, opts ...grpc.CallOption) (DivideService_DivideManyTimesClient, error)
}

type divideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDivideServiceClient(cc grpc.ClientConnInterface) DivideServiceClient {
	return &divideServiceClient{cc}
}

func (c *divideServiceClient) DivideManyTimes(ctx context.Context, in *DivideManyTimesRequest, opts ...grpc.CallOption) (DivideService_DivideManyTimesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DivideService_serviceDesc.Streams[0], "/divide.DivideService/DivideManyTimes", opts...)
	if err != nil {
		return nil, err
	}
	x := &divideServiceDivideManyTimesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DivideService_DivideManyTimesClient interface {
	Recv() (*DivideManyTimesResponse, error)
	grpc.ClientStream
}

type divideServiceDivideManyTimesClient struct {
	grpc.ClientStream
}

func (x *divideServiceDivideManyTimesClient) Recv() (*DivideManyTimesResponse, error) {
	m := new(DivideManyTimesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DivideServiceServer is the server API for DivideService service.
type DivideServiceServer interface {
	// Server Streaming
	DivideManyTimes(*DivideManyTimesRequest, DivideService_DivideManyTimesServer) error
}

// UnimplementedDivideServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDivideServiceServer struct {
}

func (*UnimplementedDivideServiceServer) DivideManyTimes(*DivideManyTimesRequest, DivideService_DivideManyTimesServer) error {
	return status.Errorf(codes.Unimplemented, "method DivideManyTimes not implemented")
}

func RegisterDivideServiceServer(s *grpc.Server, srv DivideServiceServer) {
	s.RegisterService(&_DivideService_serviceDesc, srv)
}

func _DivideService_DivideManyTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DivideManyTimesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DivideServiceServer).DivideManyTimes(m, &divideServiceDivideManyTimesServer{stream})
}

type DivideService_DivideManyTimesServer interface {
	Send(*DivideManyTimesResponse) error
	grpc.ServerStream
}

type divideServiceDivideManyTimesServer struct {
	grpc.ServerStream
}

func (x *divideServiceDivideManyTimesServer) Send(m *DivideManyTimesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DivideService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "divide.DivideService",
	HandlerType: (*DivideServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DivideManyTimes",
			Handler:       _DivideService_DivideManyTimes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "divide/dividepb/divide.proto",
}
